# -*- python -*-
# ex: set filetype=python:

import os
import boto3
import subprocess
import json

from buildbot.plugins import *
from buildbot.www.hooks.github import GitHubEventHandler
from twisted.python import log

def get_default_environment(ssm_client, variable, default):
    value = os.environ.get(variable, default)
    if value.startswith("ssm://"):
        try:
            response = ssm_client.get_parameter(Name=value.replace("ssm://", ""), WithDecryption=True)
            parameter = response.get('Parameter', {})
            return parameter.get('Value', default)
        except:
            return default
    return value

class StrictHandler(GitHubEventHandler):

    def handle_pull_request(self, payload, event):
        number = payload['number']
        head_user_login = payload['pull_request']['head']['user']['login']
        author_association = payload['pull_request']['author_association']
        if (head_user_login == 'UnsafePointer' and author_association == 'OWNER'):
            log.msg("GitHub PR #{}, Processing: "
                    "head commit correct user login and author association".format(number))
            return super().handle_pull_request(payload, event)
        log.msg("GitHub PR #{}, Ignoring: "
                    "head commit wrong user login and author association".format(number))
        return [], 'git'

instance_identity = subprocess.check_output(['curl', '-s', 'http://169.254.169.254/latest/dynamic/instance-identity/document'])
identity_data = json.loads(instance_identity)
aws_region = identity_data['region']
ssm_client = boto3.client('ssm', region_name=aws_region)
c = BuildmasterConfig = {}

linux_worker_name = get_default_environment(ssm_client, "BUILDBOT_LINUX_WORKER_USERNAME", "example-worker-linux")
windows_worker_name = get_default_environment(ssm_client, "BUILDBOT_WINDOWS_WORKER_USERNAME", "example-worker-windows")
worker_password = get_default_environment(ssm_client, "BUILDBOT_WORKER_PASSWORD", "pass")
c['workers'] = []

c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

c['change_source'] = []

pipelines = [
  {
    'suffix': 'linux',
    'workername': linux_worker_name,
    'command': './ci/linux.sh',
    'ami': 'ami-07225c100ab116fa9',
    'sgs': ['sg-048857df200b4ef4f']
  },
  {
    'suffix': 'windows',
    'workername': windows_worker_name,
    'command': 'call ./ci/windows.bat',
    'ami': 'ami-045f8603a6a480044',
    'sgs': ['sg-048857df200b4ef4f', 'sg-0f59e118151d0f235']
  }
]

c['schedulers'] = []

c['builders'] = []
for pipeline in pipelines:
  workername = pipeline['workername']
  c['workers'].append(worker.EC2LatentWorker(workername,
                                             worker_password,
                                             't2.medium',
                                             ami=pipeline['ami'],
                                             keypair_name='buildbot-key',
                                             subnet_id='subnet-00b50522e25b556a8',
                                             security_group_ids=pipeline['sgs'],
                                             build_wait_timeout=0,
                                             instance_profile_name='ec2_buildbot_worker_instance_profile'))
  builder_name = "ruby-{}".format(pipeline['suffix'])
  c['schedulers'].append(schedulers.SingleBranchScheduler(name="webhook-pull-{}".format(pipeline['suffix']),
                                                          change_filter=util.ChangeFilter(category='pull', repository="https://github.com/UnsafePointer/ruby"),
                                                          treeStableTimer=None,
                                                          fileIsImportant=None,
                                                          builderNames=[builder_name]))
  c['schedulers'].append(schedulers.ForceScheduler(name="force-{}".format(pipeline['suffix']),
                                                   builderNames=[builder_name]))

  factory = util.BuildFactory()
  factory.addStep(steps.GitHub(repourl='http://github.com/UnsafePointer/ruby.git',
                               mode='full'))
  factory.addStep(steps.ShellCommand(command=pipeline['command'],
                                     workdir="build"))
  if pipeline['suffix'] == 'windows':
      factory.addStep(steps.ShellCommand(command=["call", "self-terminate.bat"],
                                         workdir="C:\\Users\\Administrator",
                                         alwaysRun=True))

  c['builders'].append(util.BuilderConfig(name=builder_name,
                                          workernames=[workername],
                                          factory=factory))

context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=get_default_environment(ssm_client, "BUILDBOT_GITHUB_API_TOKEN", "not-a-real-token"),
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build done.')
c['services'] = []
c['services'].append(gs)

c['title'] = "ruby"
c['titleURL'] = "https://github.com/UnsafePointer/ruby"

c['buildbotURL'] = get_default_environment(ssm_client, "BUILDBOT_WEB_URL", "http://localhost:8010/")

c['www'] = dict(port=int(get_default_environment(ssm_client, "BUILDBOT_WEB_PORT", "8010")),
                plugins=dict(waterfall_view={}, console_view={}),
                change_hook_dialects={'github': {
                    'secret': get_default_environment(ssm_client, "BUILDBOT_GITHUB_HOOK_SECRET", "not-so-secret"),
                    'strict': True,
                    'class': StrictHandler
                }})

admin_username = get_default_environment(ssm_client, "BUILDBOT_ADMIN_USERNAME", "admin")
admin_password = get_default_environment(ssm_client, "BUILDBOT_ADMIN_PASSWORD", "admin")

c['www']['authz'] = util.Authz(
        allowRules = [
            util.AnyEndpointMatcher(role="admins")
        ],
        roleMatchers = [
            util.RolesFromUsername(roles=['admins'], usernames=[admin_username])
        ]
)
c['www']['auth'] = util.UserPasswordAuth([(admin_username, admin_password)])

c['db'] = {
    'db_url' : get_default_environment(ssm_client, "BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
